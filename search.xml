<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对于Java泛型的一些思考</title>
      <link href="/2022/07/04/%E5%AF%B9%E4%BA%8EJava%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
      <url>/2022/07/04/%E5%AF%B9%E4%BA%8EJava%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搬家</title>
      <link href="/2022/03/20/%E6%90%AC%E5%AE%B6/"/>
      <url>/2022/03/20/%E6%90%AC%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow实现敏感词过滤</title>
      <link href="/2021/05/26/TensorFlow%E5%AE%9E%E7%8E%B0%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/"/>
      <url>/2021/05/26/TensorFlow%E5%AE%9E%E7%8E%B0%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="对数据库中的中文文本进行敏感词过滤"><a href="#对数据库中的中文文本进行敏感词过滤" class="headerlink" title="对数据库中的中文文本进行敏感词过滤"></a>对数据库中的中文文本进行敏感词过滤</h1><h2 id="所需使用的全部包种："><a href="#所需使用的全部包种：" class="headerlink" title="所需使用的全部包种："></a>所需使用的全部包种：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import jieba</span><br><span class="line">import jieba.posseg as pseg</span><br><span class="line">import re</span><br><span class="line">import string</span><br><span class="line">from keras.utils.np_utils import to_categorical</span><br><span class="line">from keras.preprocessing.text import Tokenizer</span><br><span class="line">from sklearn.preprocessing import LabelEncoder</span><br><span class="line">from gensim.models import word2vec</span><br><span class="line">from keras.preprocessing.sequence import pad_sequences</span><br><span class="line">from keras.layers import *</span><br><span class="line">from keras.models import load_model</span><br><span class="line">from keras.models import Sequential</span><br><span class="line">import matplotlib.pyplot as plt</span><br></pre></td></tr></table></figure><h2 id="数据集预处理"><a href="#数据集预处理" class="headerlink" title="数据集预处理"></a>数据集预处理</h2><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><ol><li><p>通过爬虫、互联网下载等方式获取基础的数据集，通常保存为<code>.txt</code>或<code>.csv</code>的格式</p><blockquote><p>直接修改后缀修改为统一的csv文件，通过Excel打开后单元格设置为填充对齐。</p></blockquote></li><li><p>在第二列对数据文本进行标记操作，本文针对二分类展开研究，爬取文本也为两种标签的分类。</p></li><li><p>使用记事本打开标签化的csv文件，在最上方标记分栏，本课题二分类为“NMSL,NMYSL,”</p><blockquote><p>以上均为UTF-8编码</p></blockquote></li><li><p>可以使用Excel插件<code>方方格子</code>对两种分类进行打乱。</p><h3 id="读入数据"><a href="#读入数据" class="headerlink" title="读入数据"></a>读入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">&#x27;nmslTrainning.csv&#x27;</span>, lineterminator=<span class="string">&#x27;\n&#x27;</span>) <span class="comment">#读数据</span></span><br><span class="line">test_data = pd.read_csv(<span class="string">&#x27;nmslTest.csv&#x27;</span>, lineterminator=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="对数据进行规格化"><a href="#对数据进行规格化" class="headerlink" title="对数据进行规格化"></a>对数据进行规格化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encodeLabel</span>(<span class="params">data</span>):</span></span><br><span class="line">    listLable=[]</span><br><span class="line">    <span class="keyword">for</span> lable <span class="keyword">in</span> data[<span class="string">&#x27;lable&#x27;</span>]:</span><br><span class="line">        listLable.append(lable)</span><br><span class="line">    le = LabelEncoder() <span class="comment">#规格化</span></span><br><span class="line">    resultLable=le.fit_transform(listLable) <span class="comment">#将标签排序并转换为数字标签</span></span><br><span class="line">    <span class="keyword">return</span> resultLable</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getReview</span>(<span class="params">data</span>):</span></span><br><span class="line">    listReview=[]</span><br><span class="line">    <span class="keyword">for</span> review <span class="keyword">in</span> data[<span class="string">&#x27;review&#x27;</span>]:</span><br><span class="line">        listReview.append(review)</span><br><span class="line">    <span class="keyword">return</span> listReview</span><br><span class="line"></span><br><span class="line">trainLable = encodeLabel(train_data)</span><br><span class="line">testLable = encodeLabel(test_data)</span><br><span class="line">trainReview = getReview(train_data)</span><br><span class="line">testReview = getReview(test_data)</span><br></pre></td></tr></table></figure><p>在对中文文本进行处理时，停用词会经常会对文本种类的判断做出不必要的干扰，我们导入一个外部的停用词表通过正则对其进行一个削除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stopwordslist</span>():</span></span><br><span class="line">    stopwords = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;../中文停用词表.txt&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>).readlines()]</span><br><span class="line">    <span class="keyword">return</span> stopwords</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteStop</span>(<span class="params">sentence</span>):</span></span><br><span class="line">    stopwords=stopwordslist()</span><br><span class="line">    outstr=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sentence:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> stopwords <span class="keyword">and</span> i!=<span class="string">&quot;\n&quot;</span>:</span><br><span class="line">            outstr+=i</span><br><span class="line">    <span class="keyword">return</span> outstr</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordCut</span>(<span class="params">Review</span>):</span></span><br><span class="line">    Mat=[]</span><br><span class="line">    <span class="keyword">for</span> rec <span class="keyword">in</span> Review:</span><br><span class="line">        seten=[]</span><br><span class="line">        rec = re.sub(<span class="string">&#x27;[%s]&#x27;</span> % re.escape(string.punctuation), <span class="string">&#x27;&#x27;</span>,rec)</span><br><span class="line">        fenci=jieba.lcut(rec) <span class="comment">#精确分词</span></span><br><span class="line">        stc=deleteStop(fenci)</span><br><span class="line">        seg_list=pseg.cut(stc)                                              <span class="comment">#标注词性</span></span><br><span class="line">        <span class="keyword">for</span> word,flag <span class="keyword">in</span> seg_list:</span><br><span class="line">            <span class="keyword">if</span> flag <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;nr&quot;</span>,<span class="string">&quot;ns&quot;</span>,<span class="string">&quot;nt&quot;</span>,<span class="string">&quot;nz&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;ul&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;t&quot;</span>]:  <span class="comment">#同时去掉干扰词性</span></span><br><span class="line">                seten.append(word)</span><br><span class="line">        Mat.append(seten)</span><br><span class="line">    <span class="keyword">return</span> Mat</span><br></pre></td></tr></table></figure><p>上面的操作同时对文本进行了分词，然后保存就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trainCut = wordCut(trainReview)</span><br><span class="line">testCut = wordCut(testReview)</span><br><span class="line">wordCut = trainCut+testCut</span><br></pre></td></tr></table></figure><p>也可以加载之前分好词的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fileDic=<span class="built_in">open</span>(<span class="string">&#x27;../wordCut.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> wordCut:</span><br><span class="line">    fileDic.write(<span class="string">&quot; &quot;</span>.join(i))</span><br><span class="line">    fileDic.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">fileDic.close()</span><br><span class="line">words = [line.strip().split(<span class="string">&quot; &quot;</span>) <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;../wordCut.txt&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>).readlines()]</span><br></pre></td></tr></table></figure><h2 id="词向量训练"><a href="#词向量训练" class="headerlink" title="词向量训练"></a>词向量训练</h2><h3 id="单词数字化"><a href="#单词数字化" class="headerlink" title="单词数字化"></a>单词数字化</h3><p>Tensorflow只能导入数字化的文本进行训练，所以需要将分好的单词进行数字化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tokenizer=Tokenizer()</span><br><span class="line">tokenizer.fit_on_texts(words) <span class="comment">#根据词频进行编号</span></span><br><span class="line">vocab = tokenizer.word_index  <span class="comment">#vocab为每个词的编号</span></span><br></pre></td></tr></table></figure><p>同样的，我们对训练集和测试集做同样的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trainID = tokenizer.texts_to_sequences(trainCut)</span><br><span class="line">testID = tokenizer.texts_to_sequences(testCut)</span><br></pre></td></tr></table></figure><p>数字化词组后，会面临数词长度不一的问题，通过<code>pad_sequences</code>来解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trainSeq=pad_sequences(trainID,maxlen=maxLen)</span><br><span class="line">testSeq=pad_sequences(testID,maxlen=maxLen)</span><br></pre></td></tr></table></figure><h3 id="标签规格化-One-Hot"><a href="#标签规格化-One-Hot" class="headerlink" title="标签规格化(One-Hot)"></a>标签规格化(One-Hot)</h3><p>数据集的label已经转化为独热编码，方便处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">trainCate = to_categorical(trainLable, num_classes=<span class="number">2</span>)</span><br><span class="line">testCate= to_categorical(testLable, num_classes=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="word2vec"><a href="#word2vec" class="headerlink" title="word2vec"></a>word2vec</h3><p>Tensorflow中包括有Enbedding嵌入层，由于效果不尽完善，我们使用word2vec进行代替，进行词关系的训练，帮助进行对敏感词的筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_featrues = <span class="number">100</span> <span class="comment">#词向量的维度</span></span><br><span class="line">min_word_count = <span class="number">3</span> <span class="comment">#最小词频</span></span><br><span class="line">num_workers =<span class="number">4</span>  <span class="comment">#cpu训练核心数</span></span><br><span class="line">context = <span class="number">4</span> <span class="comment">#上下文窗口大小</span></span><br><span class="line"></span><br><span class="line">model = word2vec.Word2Vec(wordCut, workers=num_workers, size=num_featrues, min_count=min_word_count,window=context)</span><br><span class="line"></span><br><span class="line">model.init_sims(replace=<span class="literal">True</span>) <span class="comment"># 强制归一化</span></span><br><span class="line">model.save(<span class="string">&quot;mgcModel&quot;</span>) <span class="comment">#保存训练好的词向量模型</span></span><br><span class="line">model.wv.save_word2vec_format(<span class="string">&quot;CNNmgc&quot;</span>,binary=<span class="literal">False</span>) <span class="comment">#可视化</span></span><br></pre></td></tr></table></figure><p>完成w2v的训练后，进行对Embedding的替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">embedding_matrix = np.zeros((<span class="built_in">len</span>(vocab) + <span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line"><span class="keyword">for</span> word, i <span class="keyword">in</span> vocab.items():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        embedding_vector = w2v_model[<span class="built_in">str</span>(word)]</span><br><span class="line">        embedding_matrix[i] = embedding_vector</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main_input = Input(shape=(maxLen,), dtype=<span class="string">&#x27;float64&#x27;</span>)</span><br><span class="line">embedder = Embedding(<span class="built_in">len</span>(vocab) + <span class="number">1</span>, <span class="number">100</span>, input_length=maxLen, weights=[embedding_matrix], trainable=<span class="literal">False</span>) </span><br><span class="line">model=Sequential() <span class="comment">#顺序模型</span></span><br><span class="line">model.add(embedder) <span class="comment">#词嵌入</span></span><br><span class="line">model.add(Conv1D(<span class="number">256</span>,<span class="number">3</span>,padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment">#一维卷积</span></span><br><span class="line">model.add(MaxPool1D(maxLen-<span class="number">5</span>,<span class="number">3</span>,padding=<span class="string">&#x27;same&#x27;</span>)) <span class="comment">#池化层</span></span><br><span class="line">model.add(Conv1D(<span class="number">32</span>,<span class="number">3</span>,padding=<span class="string">&#x27;same&#x27;</span>,activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">model.add(Flatten()) <span class="comment">#扁平化</span></span><br><span class="line">model.add(Dropout(<span class="number">0.3</span>)) <span class="comment">#防止过拟合</span></span><br><span class="line">model.add(Dense(<span class="number">256</span>,activation=<span class="string">&#x27;relu&#x27;</span>)) <span class="comment">#全连接层</span></span><br><span class="line">model.add(Dropout(<span class="number">0.2</span>))</span><br><span class="line">model.add(Dense(units=<span class="number">2</span>,activation=<span class="string">&#x27;softmax&#x27;</span>))</span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">&#x27;categorical_crossentropy&#x27;</span>, optimizer=<span class="string">&#x27;adam&#x27;</span>, metrics=[<span class="string">&#x27;accuracy&#x27;</span>]) <span class="comment">#adam优化器，输出accuracy精确度</span></span><br><span class="line">history=model.fit(trainSeq, trainCate, batch_size=<span class="number">256</span>, epochs=<span class="number">6</span>,validation_split=<span class="number">0.2</span>)</span><br><span class="line">model.save(<span class="string">&quot;TextCNN&quot;</span>) <span class="comment">#保存模型</span></span><br></pre></td></tr></table></figure><h2 id="预测评估"><a href="#预测评估" class="headerlink" title="预测评估"></a>预测评估</h2><p>对训练好的模型进行评估</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mainModel = load_model(<span class="string">&#x27;TextCNN&#x27;</span>)</span><br><span class="line">result = mainModel.predict(testSeq)  <span class="comment"># 预测样本属于每个类别的概率</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(result,axis=<span class="number">1</span>))</span><br><span class="line">score = mainModel.evaluate(testSeq,</span><br><span class="line">                           testCate,</span><br><span class="line">                           batch_size=<span class="number">32</span>) <span class="comment">#输出预测结果</span></span><br></pre></td></tr></table></figure><h2 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h2><p>通过matplotlib进行损失函数、精确度等的可视化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(history.history[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;val_accuracy&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Model accuracy&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Accuracy&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;Train&#x27;</span>,<span class="string">&#x27;Valid&#x27;</span>],loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;loss&#x27;</span>])</span><br><span class="line">plt.plot(history.history[<span class="string">&#x27;val_loss&#x27;</span>])</span><br><span class="line">plt.title(<span class="string">&#x27;Model loss&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.legend([<span class="string">&#x27;Train&#x27;</span>,<span class="string">&#x27;Valid&#x27;</span>],loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>全部项目文件已上传至Github</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
            <tag> CNN神经网络 </tag>
            
            <tag> 二分类 </tag>
            
            <tag> 中文敏感词过滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记-numpy&amp;pandas</title>
      <link href="/2021/05/04/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-numpy-pandas/"/>
      <url>/2021/05/04/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-numpy-pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="numpy-amp-pandas"><a href="#numpy-amp-pandas" class="headerlink" title="numpy&amp;pandas"></a>numpy&amp;pandas</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>numpy和pandas都是python的高级数据类型，运算更加快速、便捷，能极大提升python的效率。</p><blockquote><p>numpy的特点是向量化运算</p></blockquote><blockquote><p>pandas的特点是对象，对象特点是字典和列表混合</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接pip安装即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><p>习惯上<code>import numpy as np</code></p><p>将矩阵定义为np数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">array = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">                  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(array) <span class="comment">#输出数组</span></span><br><span class="line"><span class="built_in">print</span>(array.ndim) <span class="comment">#输出维度</span></span><br><span class="line"><span class="built_in">print</span>(array.shape) <span class="comment">#输出行列数</span></span><br><span class="line"><span class="built_in">print</span>(array.size) <span class="comment">#输出所有元素个数</span></span><br></pre></td></tr></table></figure><h3 id="创建array"><a href="#创建array" class="headerlink" title="创建array"></a>创建array</h3><pre><code class="python">import numpy as np a = np.array([1,2,45,6],dtype=np.int) #dtype:指定array的数据类型print(a.dtype)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记-正则表达式</title>
      <link href="/2021/04/29/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/04/29/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="RegEx正则表达式"><a href="#RegEx正则表达式" class="headerlink" title="RegEx正则表达式"></a>RegEx正则表达式</h2><p>首先来学习简单的python匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern1 = <span class="string">&quot;cat&quot;</span></span><br><span class="line">pattern2 = <span class="string">&quot;dog&quot;</span></span><br><span class="line">nmsl = <span class="string">&quot;cat eats birds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pattern1 <span class="keyword">in</span> nmsl) <span class="comment">#使用in就能简单匹配字符串</span></span><br><span class="line"><span class="built_in">print</span>(pattern2 <span class="keyword">in</span> nmsl)</span><br></pre></td></tr></table></figure><p>得到True和False的输出</p><p>在使用正则前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment">#引入regular expression模块</span></span><br></pre></td></tr></table></figure><p>然后进行正则匹配：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern1 = <span class="string">&quot;cat&quot;</span></span><br><span class="line">pattern2 = <span class="string">&quot;dog&quot;</span></span><br><span class="line">nmsl = <span class="string">&quot;cat eats birds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(re.search(pattern1,nmsl)) <span class="comment">#在nmsl中匹配pattern1</span></span><br><span class="line"><span class="built_in">print</span>(re.search(pattern2,nmsl))</span><br></pre></td></tr></table></figure><p>乍看之下没多大区别，只是语法形式发生了变换</p><h3 id="多种匹配"><a href="#多种匹配" class="headerlink" title="多种匹配"></a>多种匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pattern1 = <span class="string">&quot;c[ao]t&quot;</span> <span class="comment">#使用[]来框选允许替换的部分，a和o都可以完成匹配</span></span><br><span class="line">nmsl = <span class="string">&quot;cat eats birds&quot;</span></span><br><span class="line">nmysl = <span class="string">&quot;cot eats birds&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(re.search(pattern1,nmsl)) <span class="comment">#在nmsl中匹配pattern1</span></span><br><span class="line"><span class="built_in">print</span>(re.search(pattern1,nmysl)) <span class="comment">#在nmysl中匹配pattern1</span></span><br></pre></td></tr></table></figure><p>得到的两个返回都是成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;re.Match object; span&#x3D;(0, 3), match&#x3D;&#39;cat&#39;&gt;</span><br><span class="line">&lt;re.Match object; span&#x3D;(0, 3), match&#x3D;&#39;cot&#39;&gt;</span><br></pre></td></tr></table></figure><p>而在python中还可以做到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c[A-Z]t&quot;</span>,nmsl))</span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c[a-z]t&quot;</span>,nmsl))</span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c[0-9]t&quot;</span>,nmsl))</span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c[0-9a-z]t&quot;</span>,nmsl))</span><br></pre></td></tr></table></figure><h3 id="特殊匹配"><a href="#特殊匹配" class="headerlink" title="特殊匹配"></a>特殊匹配</h3><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c\dt&quot;</span>,nmsl)) <span class="comment">#数字</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c\Dt&quot;</span>,nmsl)) <span class="comment">#非数字</span></span><br></pre></td></tr></table></figure><h4 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h4><p><code>\n</code> <code>\t</code> <code>\r</code> <code>\f</code> <code>\v</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c\st&quot;</span>,nmsl)) <span class="comment">#空白</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c\St&quot;</span>,nmsl)) <span class="comment">#非空白</span></span><br></pre></td></tr></table></figure><h4 id="所有字母数字下划线"><a href="#所有字母数字下划线" class="headerlink" title="所有字母数字下划线"></a>所有字母数字下划线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c\wt&quot;</span>,nmsl)) <span class="comment">#所有字母数字下划线</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c\Wt&quot;</span>,nmsl)) <span class="comment">#非所有字母数字下划线</span></span><br></pre></td></tr></table></figure><h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;\bcat\b&quot;</span>,nmsl)) <span class="comment">#所有贴着包含cat的空格</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;\Bcat\B&quot;</span>,nmsl)) <span class="comment">#非所有......</span></span><br></pre></td></tr></table></figure><h4 id="特殊字符-amp-任意字符"><a href="#特殊字符-amp-任意字符" class="headerlink" title="特殊字符&amp;任意字符"></a>特殊字符&amp;任意字符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;cat\\&quot;</span>,nmsl)) <span class="comment">#\</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;c.t&quot;</span>,nmsl)) <span class="comment">#.可以匹配除换行符外的任意字符</span></span><br></pre></td></tr></table></figure><h4 id="句尾-amp-句首"><a href="#句尾-amp-句首" class="headerlink" title="句尾&amp;句首"></a>句尾&amp;句首</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;^cat&quot;</span>,nmsl)) <span class="comment">#出现在句首完成匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;cat$&quot;</span>,nmsl)) <span class="comment">#出现在句尾完成匹配</span></span><br></pre></td></tr></table></figure><h4 id="是否"><a href="#是否" class="headerlink" title="是否"></a>是否</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;cat(yy)&quot;</span>,nmsl)) <span class="comment">#cat和catyy都可以匹配</span></span><br></pre></td></tr></table></figure><h4 id="多行匹配"><a href="#多行匹配" class="headerlink" title="多行匹配"></a>多行匹配</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">line = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  dog runs to cat</span></span><br><span class="line"><span class="string">  nm is a dog</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;dog&quot;</span>,line,flag = re.M)) <span class="comment">#出现在句首完成匹配</span></span><br></pre></td></tr></table></figure><h4 id="0次或多次"><a href="#0次或多次" class="headerlink" title="0次或多次"></a>0次或多次</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;ab*&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>)) </span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;ab*&quot;</span>,<span class="string">&quot;ababababbbaa&quot;</span>)) <span class="comment">#会匹配所有符合条件的部分</span></span><br></pre></td></tr></table></figure><h4 id="1次或多次"><a href="#1次或多次" class="headerlink" title="1次或多次"></a>1次或多次</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;ab+&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>)) </span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;ab+&quot;</span>,<span class="string">&quot;ababababbbaa&quot;</span>)) <span class="comment">#会匹配所有符合条件的部分</span></span><br></pre></td></tr></table></figure><h4 id="指定出现次数"><a href="#指定出现次数" class="headerlink" title="指定出现次数"></a>指定出现次数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;ab&#123;2，4&#125;&quot;</span>,<span class="string">&quot;aaaaa&quot;</span>)) </span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&quot;a&#123;1,2&#125;b&#123;2，4&#125;&quot;</span>,<span class="string">&quot;abbabababbbaa&quot;</span>)) <span class="comment">#会匹配所有符合条件的部分</span></span><br></pre></td></tr></table></figure><h4 id="group组"><a href="#group组" class="headerlink" title="group组"></a>group组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">&quot;(\d+),Date: (.+)&quot;</span>,<span class="string">&quot;3342840,Date: May/1/2021&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(match.group()) <span class="comment">#输出所有组</span></span><br><span class="line"><span class="built_in">print</span>(match.group(<span class="number">1</span>)) <span class="comment">#输出第一个括号匹配的内容</span></span><br><span class="line"><span class="built_in">print</span>(match.group(<span class="number">2</span>)) <span class="comment">#输出第二个括号匹配的内容</span></span><br></pre></td></tr></table></figure><p>当group的数量非常多时，还可以添加名字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = re.search(<span class="string">&quot;(?P&lt;id&gt;\d+),Date: (?P&lt;Date&gt;.+)&quot;</span>,<span class="string">&quot;3342840,Date: May/1/2021&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(match.group(<span class="built_in">id</span>)) <span class="comment">#输出group名为id的匹配内容</span></span><br><span class="line"><span class="built_in">print</span>(match.group(Date)) <span class="comment">#输出group名为Date的匹配内容</span></span><br></pre></td></tr></table></figure><h4 id="寻找所有匹配"><a href="#寻找所有匹配" class="headerlink" title="寻找所有匹配"></a>寻找所有匹配</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&quot;r[ua]n&quot;</span>,<span class="string">&quot;I run to his mother&#x27;s house,but his mother rans to heaven.&quot;</span>))</span><br></pre></td></tr></table></figure><p>会得到<code>[&#39;run&#39;, &#39;ran&#39;]</code>的返回</p><p><code>r[ua]n</code>也有<code>(run|ran)</code>、<code>r(u|a)n</code>的写法</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>匹配内容-替换内容-替换位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">&quot;runs&quot;</span>,<span class="string">&quot;catches&quot;</span>,<span class="string">&quot;The dog runs to cat.&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h4><p>匹配到特定内容时，对字符串进行分裂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.split(<span class="string">&quot;[,:;]&quot;</span>,<span class="string">&quot;我去你家,你妈说:她死了;但又没完全死&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h4><p>对正则表达式进行编译，完整表现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">nmsl = re.<span class="built_in">compile</span>(<span class="string">&quot;\d+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(nmsl.search(<span class="string">&quot;3423422aa&quot;</span>))</span><br></pre></td></tr></table></figure><p>将正则表达式生成为一个对象，拥有match和search函数的调用</p><blockquote><p>以上就是python中正则表达式的基本使用法</p><blockquote><p>可以通过 <strong><a href="https://regex101.com/">正则大师</a></strong> 来验证正则表达式的正确性</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提前准备的大同之行(待定)</title>
      <link href="/2021/04/28/%E6%8F%90%E5%89%8D%E5%87%86%E5%A4%87%E7%9A%84%E5%A4%A7%E5%90%8C%E4%B9%8B%E8%A1%8C/"/>
      <url>/2021/04/28/%E6%8F%90%E5%89%8D%E5%87%86%E5%A4%87%E7%9A%84%E5%A4%A7%E5%90%8C%E4%B9%8B%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="大同，我冲冲冲"><a href="#大同，我冲冲冲" class="headerlink" title="大同，我冲冲冲"></a>大同，我冲冲冲</h1><hr><p><strong>芜湖~~~</strong></p><p>总行程：4天</p><p>人均：200￥</p><p><strong>支付宝：17535250985</strong></p><hr><blockquote><p>身份证、学生证、纸巾、湿巾、移动电源</p></blockquote><h3 id="6月3日"><a href="#6月3日" class="headerlink" title="6月3日"></a>6月3日</h3><p>从天津坐火车出发</p><h3 id="6月4日"><a href="#6月4日" class="headerlink" title="6月4日"></a>6月4日</h3><blockquote><p>身份证</p></blockquote><ul><li>到达大同 </li><li>到亲爸爸家安顿</li><li>早饭：羊杂、油饼  （羊杂）</li><li>骑车乱飞（古城内景点）</li><li>午饭：凉粉（凉粉）</li><li>去旅馆安顿</li><li>文瀛湖、博物馆、御河生态园</li><li>晚饭：凯鸽火锅（羊肉）</li><li>古城墙</li></ul><h3 id="6月5日"><a href="#6月5日" class="headerlink" title="6月5日"></a>6月5日</h3><ul><li>？</li><li>晚饭：正经刀削面（刀削面）</li><li>骑车逛一逛</li></ul><h3 id="6月6日"><a href="#6月6日" class="headerlink" title="6月6日"></a>6月6日</h3><blockquote><p>学生证、身份证、移动电源</p></blockquote><ul><li>早饭：瞎几把吃</li><li>坐车去<strong>浑源</strong><ul><li>悬空寺</li><li>恒山</li></ul></li><li>晚饭：369紫泥（莜面）</li><li>骑车逛一逛</li></ul><h3 id="6月7日"><a href="#6月7日" class="headerlink" title="6月7日"></a>6月7日</h3><blockquote><p>需要学生证、身份证</p></blockquote><ul><li>早饭：稠粥</li><li><strong>云冈石窟</strong></li><li>晚饭：凤临阁（烧卖）</li><li>收拾东西滚蛋</li></ul><p>更新时间：2021.5.26</p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊该怎么选择</title>
      <link href="/2021/04/20/%E5%85%B3%E4%BA%8E%E5%90%8E%E9%9D%A2%E7%9A%84%E8%B7%AF%E6%80%8E%E4%B9%88%E8%B5%B0/"/>
      <url>/2021/04/20/%E5%85%B3%E4%BA%8E%E5%90%8E%E9%9D%A2%E7%9A%84%E8%B7%AF%E6%80%8E%E4%B9%88%E8%B5%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="重要的话放在聊天记录里也太可惜了。"><a href="#重要的话放在聊天记录里也太可惜了。" class="headerlink" title="重要的话放在聊天记录里也太可惜了。"></a>重要的话放在聊天记录里也太可惜了。</h3><blockquote><p>虽然我和慧敏你以前交流并不算多，但并不妨碍我们聊一些更现实的话题，是吧~</p></blockquote><blockquote><p>其实事情还是挺简单的，搞清楚状态关系就行了</p></blockquote><p>尤其是大学伊始，我们就在自己做一些更大的选择了。</p><h4 id="什么是大的选择呢？"><a href="#什么是大的选择呢？" class="headerlink" title="什么是大的选择呢？"></a>什么是大的选择呢？</h4><p>今天中午吃什么，吃刀削面还是吃汉堡，这是小的选择，因为总归是要吃的。而吃不吃，做的选择就要相对大一些了。</p><p>那有没有更大一些的选择呢？那就是毕业后的去向了。去哪里，怎么去，这些其实都不是问题，太多细节的东西是没法一一规划好的。更好的方式就是先找到两点——起点和终点，自然就不会太过迷茫。</p><h4 id="那起点是什么？"><a href="#那起点是什么？" class="headerlink" title="那起点是什么？"></a>那起点是什么？</h4><p>你现在在哪里，拥有哪些社会资源，掌握怎样的能力，都是你的起点。<br>你想去哪里，达到怎样的地位，想完成一个怎样的生活状态，可以算一个阶段性的终点。</p><p>我想去哪里呢？很多人都会直接说大城市或者小城市这样的概念，其实我只是想去一个能让我过得安心舒适的地方，从这个角度看来，大城市和小城市的界定其实就相对模糊了，不论是北京还是大同，都有令我安心的元素。</p><p>选择大同，我能很轻松地和家人完成互动，面对面，不加任何掩饰地交流，彼此都非常安心，而且大同毕竟是我长大的地方，不论归属感还是文化的认同感都一定是最强的。即便我从小就认为大同话听起来很流氓，但并不妨碍它听起来确实倍感亲切，有家的味道。</p><p>不得不说小城市是关系社会，关系带来的影响有好有坏，你想办一件大事，需要找关系，但你找关系就能办一件大事，不也很好吗。频繁在亲戚间串门，和同辈们推杯换盏，不也很温暖吗。就算挣的钱少一些，但家人就在身边，不就够了吗？</p><p>北京就不好了吗，不是的。生活在北京，最直接的变化就是收入的增加，他们都说北京挣的钱带不走，可我们都知道这其实是片面的，总可以剩下不少的，足够我们来让远在大同的家人过上更好的生活，老有所养，病有所医，除此之外我们还能享受一些更多的，发展个性的事物，北京有更多的肯德基，甚至就在你住的楼下，罗森新出的蛋糕也能马上买到，音乐会和舞蹈也就在地铁能及的地方。对于生活在现代社会的我们来说，其实是很难避免对新事物产生憧憬和追求的。</p><blockquote><p>这就是个选择，没有好与不好，权看你更想要什么。</p></blockquote><blockquote><p>而我确实想给家人一个更富足的生活，也仅此而已。</p></blockquote><p>那你想去一个什么样的地方呢？又想实现怎样的人生呢？</p><h4 id="终点又是什么？"><a href="#终点又是什么？" class="headerlink" title="终点又是什么？"></a>终点又是什么？</h4><p>假设我能在世上存活八十年，现在四分之一已经过去了，那我们仅规划下一个四分之一就好了，全程太长，也太累。</p><p>我想在四十岁的时候要有房有车，不是人云亦云，而是单纯有个能回去的地方，还能从这个地方去到其他的什么位置。至于多大的房子，多快的车子，那其实不太重要，有地方住，能去到想去的地方已经完成了最终的目的。沿途的风光，则又是一些细节上的选择了。</p><p>虽然我没有女朋友，但我深知女朋友也会成为家人，她一定和我一样是个年轻人，喜欢看吧里吧里，<del>喜欢ghs</del>,喜欢追求新鲜的事物。那我想和她住什么样的地方，吃什么样的饭，养育什么样的孩子，都是我要考虑的，应该也是她要考虑的，大的框架是一定要定下的，我们愿意给孩子一个怎样的空间去发展，给他一个怎样的未来，其实大学毕业后的选择影响很大。</p><p>这其实就回到我们在微信里谈到的，我更希望你是在拥有能力后做出选择，而不是被迫选择。今天中午吃什么？刀削面加不加鸡蛋？我不加鸡蛋，不是因为加个鸡蛋太贵，而是我恰好吃的很饱。</p><p>现在已经很少有人因为一个鸡蛋而纠结，可一个爱马仕的包包何尝不是一个更大的鸡蛋呢？</p><p><strong>希望你能做不被限制的选择，不因能力而受限，只为偏好而行动。</strong></p><blockquote><p>我虚长你几岁，这些也就是我在这几年里自己体会到的，可能是因为从没人跟我说过这些话，所以我也擅自感同身受，总结出来，说与你听，写与你看。<br> 没经历过的东西很少有人能说清楚，大城市真的只有压力，小城市只有安逸吗？那断然不是的，节奏由自己把握，永远不要被环境和人推着走，才会更快乐。</p></blockquote><p><strong>莫空想，脚踏实地就好了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记-基础语法篇</title>
      <link href="/2021/04/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/04/17/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="Print"><a href="#Print" class="headerlink" title="Print()"></a>Print()</h3><p>直接打印数字   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>当我们需要输出字符串的时候，需要使用单引号<code>&#39;&#39;</code>或者双引号<code>&quot; &quot;</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;我正在学习Python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我学不会&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果要输出的句子中含有单、双引号，我们可以使用转义符<code>\</code>来实现输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I don&#x27;</span>t have money<span class="string">&#x27;) #这样输出是不行的</span></span><br><span class="line"><span class="string">print(&#x27;</span>I don\<span class="string">&#x27;t have money&#x27;</span>)</span><br></pre></td></tr></table></figure><p>也可以通过加号<code>+</code>来实现字符串的拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;apple&#x27;</span>+<span class="string">&#x27;aoligei&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当字符串与数字进行拼接的时候，也需要将数字转变为字符串后拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>+<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>+<span class="built_in">str</span>(<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p>输出结果都是相同的<code>34</code></p><p>如果都转换为数字呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">3</span>)+<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>输出的就是运算结果<code>7</code></p><hr><h3 id="简单数学运算"><a href="#简单数学运算" class="headerlink" title="简单数学运算"></a>简单数学运算</h3><h4 id="加"><a href="#加" class="headerlink" title="加(+)"></a>加(+)</h4><pre><code> 直接加</code></pre><h4 id="减"><a href="#减" class="headerlink" title="减(-)"></a>减(-)</h4><pre><code>直接减</code></pre><h4 id="乘"><a href="#乘" class="headerlink" title="乘(*)"></a>乘(*)</h4><pre><code>直接乘</code></pre><h4 id="次幂"><a href="#次幂" class="headerlink" title="次幂(**)"></a>次幂(**)</h4><pre><code>和其他常见的编程语言不同，在Python中我们使用(a**b)来表示a的b次幂&gt;2**3&gt;输出结果是8</code></pre><h4 id="除"><a href="#除" class="headerlink" title="除(/)"></a>除(/)</h4><pre><code>直接除</code></pre><h4 id="求余"><a href="#求余" class="headerlink" title="求余(%)"></a>求余(%)</h4><pre><code>直接求</code></pre><h4 id="除法取整"><a href="#除法取整" class="headerlink" title="除法取整(//)"></a>除法取整(//)</h4><pre><code>&gt;10//3&gt;会得到3&gt;11//3&gt;会得到3，可以证明是向下取整。</code></pre><hr><h3 id="自变量"><a href="#自变量" class="headerlink" title="自变量"></a>自变量</h3><h4 id="直接赋值"><a href="#直接赋值" class="headerlink" title="直接赋值"></a>直接赋值</h4><p>我们可以直接对一个名字进行赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oceanus = <span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果这个时候我们直接输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(oceanus)</span><br></pre></td></tr></table></figure><p>就会直接得到5</p><h4 id="连续赋值"><a href="#连续赋值" class="headerlink" title="连续赋值"></a>连续赋值</h4><p>当然也可以连续赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b,c = <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br></pre></td></tr></table></figure><p>得到的就是1，2，3</p><hr><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">oceanus = <span class="number">1</span> <span class="comment">#先对变量oceanus做一个初始化</span></span><br><span class="line"><span class="keyword">while</span> oceanus &lt; <span class="number">10</span>: <span class="comment">#然后开始循环</span></span><br><span class="line">    <span class="built_in">print</span>(oceanus) <span class="comment">#先输出oceanus</span></span><br><span class="line">    oceanus = oceanus + <span class="number">1</span> <span class="comment">#然后在循环中对变量+1</span></span><br></pre></td></tr></table></figure><p>这样就会连续输出1，2，3，……，8，9</p><p>其实while循环的结构是判断后面的条件是否为真，然后进行运算的结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> true </span><br><span class="line">    运行</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>这样是否更便于理解呢？</p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NMSL = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">21</span>,<span class="number">33</span>,<span class="number">6565</span>] <span class="comment">#先指定一个list</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> NMSL:</span><br><span class="line">    <span class="built_in">print</span>(i) <span class="comment">#循环以i输出NMSL</span></span><br><span class="line"><span class="built_in">print</span>(NMSL,i) <span class="comment">#在循环外输出NMSL和i</span></span><br></pre></td></tr></table></figure><p>第一个print会得到次序输出的1，2，3，21，33，6565<br>第二个print会得到完整的[1，2，3，21，33，6565]和一个单独的6565</p><h5 id="range迭代"><a href="#range迭代" class="headerlink" title="range迭代"></a>range迭代</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>): <span class="comment">#i在1~9间迭代</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>): <span class="comment">#c在1~9间以跨度2迭代</span></span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h4 id="if-else条件"><a href="#if-else条件" class="headerlink" title="if else条件"></a>if else条件</h4><p>在python中可以连续比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">z = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x&lt;=y&lt;z:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;false&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同理，这样也是可以成立的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">z = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x&lt;y&gt;z:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;true&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;false&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="连续if-else-elif"><a href="#连续if-else-elif" class="headerlink" title="连续if else(elif)"></a>连续if else(elif)</h4><p>elif可以无限连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x&lt;<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x&gt;<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x&lt;<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那如果出现条件串中连续满足呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x&lt;<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x&lt;<span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> x&lt;<span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><p>只会得到输出b，Python特性中满足第一个条件后就会跳出循环。</p><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><p>当我们需要将代码模块化的时候，定义一个函数就会帮助我们完成这个任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>():</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>这样我们就完成了对一个名为function的函数定义，只需要在之后调用这个函数，就可以快速运行里面的代码，省略了重复的工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span>():</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">function() <span class="comment">#调用函数</span></span><br></pre></td></tr></table></figure><p>在实际应用中，我们更多地会将a和b作为参数传入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>在调用fun()时，就需要提前对a和b进行输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#默认1对应a，2对应b</span></span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun(b=<span class="number">2</span>,a=<span class="number">1</span>)) <span class="comment">#指定参数对应</span></span><br></pre></td></tr></table></figure><p>函数的一个特性是可以指定返回的参数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    <span class="keyword">return</span> c+<span class="number">5</span> <span class="comment">#这里可以返回函数中存在的值，也可以选择其他不相干的参数。</span></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>)的结果就会是<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">1</span>,<span class="number">2</span>))的结果就会是<span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h4><p>在我们定义函数时，会指定要传入的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jk</span>(<span class="params">skirt,stocking,shirt,suit</span>):</span> <span class="comment">#skirt,stocking,shirt,suit这四个就是要传入的jk参数。</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&#x27;skirt：&#x27;</span>,skirt,</span><br><span class="line">        <span class="string">&#x27;stocking：&#x27;</span>,stocking,</span><br><span class="line">        <span class="string">&#x27;shirt：&#x27;</span>,shirt,</span><br><span class="line">        <span class="string">&#x27;suit：&#x27;</span>,suit</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">jk(<span class="string">&#x27;short&#x27;</span>,<span class="string">&#x27;black&#x27;</span>,<span class="string">&#x27;white&#x27;</span>,<span class="literal">True</span>) <span class="comment">#我们在调用时就传入对应参数的值。</span></span><br></pre></td></tr></table></figure><p>我们也可以指定默认参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jk</span>(<span class="params">skirt,stocking=<span class="string">&#x27;black&#x27;</span>,shirt=<span class="string">&#x27;white&#x27;</span>,suit=<span class="literal">True</span></span>):</span> <span class="comment">#jk的长筒袜默认都是黑色的，衬衫是白色，而且默认穿着西装外套。</span></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">&#x27;skirt：&#x27;</span>,skirt,</span><br><span class="line">        <span class="string">&#x27;stocking：&#x27;</span>,stocking,</span><br><span class="line">        <span class="string">&#x27;shirt：&#x27;</span>,shirt,</span><br><span class="line">        <span class="string">&#x27;suit：&#x27;</span>,suit</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">jk(<span class="string">&#x27;short&#x27;</span>) <span class="comment">#这次我们只需要传入没有默认值的参数就可以完成输出。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jk(<span class="string">&#x27;short&#x27;</span>,stocking=<span class="string">&#x27;white&#x27;</span>) <span class="comment">#如果要修改已经有默认值的参数，则需要专门制定对应的值，这里的jk穿着白色长筒袜。</span></span><br></pre></td></tr></table></figure><p>但是在python的函数中，我们需要将存在默认值的参数统一放在后面，如果有默认和没有默认的参数交叉，就会出现报错。</p><h4 id="全局-amp-局部变量"><a href="#全局-amp-局部变量" class="headerlink" title="全局&amp;局部变量"></a>全局&amp;局部变量</h4><p>通常我们习惯使用大写来定义全局变量<br>全局变量指在整个程序中都起作用的值，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NMSL = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span>():</span></span><br><span class="line">    a=NMSL+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span>():</span></span><br><span class="line">    b=NMSL-<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>此时NMSL分别在fun1和fun2中被调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NMSL = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    NMSL = <span class="number">2</span></span><br><span class="line">    a = NMSL + <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(NMSL) <span class="comment">#这个打印是函数fun()内的NMSL，结果是2</span></span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(NMSL) <span class="comment">#这个打印是外部的NMSL，还是1</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#这里a并未在函数外定义，所以会NameError: name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure><p>如果我们要在函数内对全局变量进行修改，需要进行强调：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NMSL = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>():</span></span><br><span class="line">    <span class="keyword">global</span> NMSL <span class="comment">#强调对全局的NMSL进行操作</span></span><br><span class="line">    NMSL=<span class="number">2</span></span><br><span class="line">fun() <span class="comment">#运行一遍函数,操作成功</span></span><br><span class="line"><span class="built_in">print</span>(NMSL) <span class="comment">#这里就会输出2而不是1</span></span><br></pre></td></tr></table></figure><hr><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><h4 id="简单的打开-写入-关闭"><a href="#简单的打开-写入-关闭" class="headerlink" title="简单的打开 写入 关闭"></a>简单的打开 写入 关闭</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&#x27;我钱包里没钱.&#x27;</span> <span class="comment">#给text赋一个字符串</span></span><br><span class="line"></span><br><span class="line">n_file = <span class="built_in">open</span>(<span class="string">&#x27;new file.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="comment">#使用open函数,对new file.txt以w的写形式打开文件.</span></span><br><span class="line">n_file.write(text) <span class="comment">#写入text的内容</span></span><br><span class="line">n_file.close() <span class="comment">#关闭n_file</span></span><br></pre></td></tr></table></figure><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendText = <span class="string">&#x27;其实我连钱包也没有.&#x27;</span> <span class="comment">#这是我们要追加的内容</span></span><br><span class="line"></span><br><span class="line">n_file = <span class="built_in">open</span>(<span class="string">&#x27;new file.txt,&#x27;</span>a<span class="string">&#x27;) # &#x27;</span>a<span class="string">&#x27;表示append,追加</span></span><br><span class="line"><span class="string">n_file.write(appendText)</span></span><br><span class="line"><span class="string">n_file.close()</span></span><br></pre></td></tr></table></figure><h4 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n_file = <span class="built_in">open</span>(<span class="string">&#x27;new file.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="comment">#通过&#x27;r&#x27;来进行读取的模式</span></span><br></pre></td></tr></table></figure><p>这里的读取实际上是将new file.txt这整个文件读取到n_file中,而不是单纯读取txt中的文本,所以要继续将文件中的内容提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n_file = <span class="built_in">open</span>(<span class="string">&#x27;new file.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">content = n_file.read()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p>除了read()可以读取全部内容,还有readline()可以按行读取,readlines()按行读取到列表里</p><hr><h3 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h3><h4 id="基本-1"><a href="#基本-1" class="headerlink" title="基本"></a>基本</h4><p>类可以包含多个属性,常用首字母大写来为类取名<br>先来定义一个计算器的类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>:</span> <span class="comment">#类名叫做Calculator</span></span><br><span class="line">    brand = <span class="string">&#x27;Casio&#x27;</span> </span><br><span class="line">    price = <span class="number">18</span> <span class="comment">#brand和price都是calculator的固有属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,x,y</span>):</span> <span class="comment">#定义类的功能,加减乘除</span></span><br><span class="line">        <span class="built_in">print</span>(x+y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minus</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(x-y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">times</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(x*y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(x/y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">off</span>(<span class="params">self,x</span>):</span> <span class="comment">#self表示传入固有属性</span></span><br><span class="line">        finalprice = self.price*x*<span class="number">0.1</span></span><br></pre></td></tr></table></figure><p>然后我们在控制台输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ca = Calcuator()</span><br><span class="line">ca.price</span><br></pre></td></tr></table></figure><p>就能直接得到<code>18</code>的返回值了</p><p>而当我们要使用<code>Calcuator</code>中的功能时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ca.add(<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>就能直接得到<code>11</code>的返回值了</p><h4 id="initial-init-初始属性"><a href="#initial-init-初始属性" class="headerlink" title="initial(init)初始属性"></a>initial(init)初始属性</h4><p><code>init</code>是类自己本身具有的一个功能,用来进行固有属性的初始化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span>:</span> <span class="comment">#同样用Calculator类来举例</span></span><br><span class="line">    brand = <span class="string">&#x27;Casio&#x27;</span> </span><br><span class="line">    price = <span class="number">18</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,brand,price,shop,city,country</span>):</span> <span class="comment">#添加init</span></span><br><span class="line">        self.b = brand</span><br><span class="line">        self.p = price</span><br><span class="line">        self.s = shop</span><br><span class="line">        self.ci = city</span><br><span class="line">        self.co = country</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self,x,y</span>):</span> <span class="comment">#定义类的功能</span></span><br><span class="line">        <span class="built_in">print</span>(x+y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minus</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(x-y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">times</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(x*y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divide</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(x/y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">off</span>(<span class="params">self,x</span>):</span> </span><br><span class="line">        finalprice = self.price*x*<span class="number">0.1</span></span><br></pre></td></tr></table></figure><p>这个时候我们调用Calculator类并输入初始值,就能在后面直接调用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = Calculator(<span class="string">&#x27;deli&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;SkyLake&#x27;</span>,<span class="string">&#x27;Tianjin&#x27;</span>,<span class="string">&#x27;China&#x27;</span>)</span><br><span class="line">c.p</span><br></pre></td></tr></table></figure><p>就会得到返回值<code>20</code>,而不是固有的<code>18</code>了</p><hr><h3 id="input输入"><a href="#input输入" class="headerlink" title="input输入"></a>input输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a_input = <span class="built_in">input</span>(<span class="string">&#x27;please input here:&#x27;</span>) <span class="comment">#出现input后程序就会在这里停止，等待用户的输入</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The input number is:&#x27;</span>,a_input) <span class="comment">#然后程序会继续进行，检测我们的输入是否正确。</span></span><br></pre></td></tr></table></figure><p>在python3中，输入的返回值全部字符串形式的。</p><p>结合输入，可以做出非常多的变换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input1 = <span class="built_in">input</span>(<span class="string">&#x27;整两个东西来&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> input1 == <span class="string">&#x27;jk&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;lsp很懂啊&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> input1 == <span class="string">&#x27;大妈&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;呕&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;芜湖&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="tuple元组和list列表"><a href="#tuple元组和list列表" class="headerlink" title="tuple元组和list列表"></a>tuple元组和list列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>) <span class="comment">#这是元组的一个形式</span></span><br><span class="line">b_tuple = <span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> <span class="comment">#这是元组的另一个形式</span></span><br><span class="line"></span><br><span class="line">a_list = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>] <span class="comment">#这是列表</span></span><br></pre></td></tr></table></figure><p>看起来他们都可以存储一组信息，元组的内容不可更改，除非替换整个元组；而列表则可以进行修改</p><p>通过循环输出元组对应位置的对应数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> fk <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a_tuple)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fk=&#x27;</span>,fk,<span class="string">&#x27;number in tuple:&#x27;</span>,a_tuple[fk])</span><br></pre></td></tr></table></figure><h4 id="向列表中尾部添加元素"><a href="#向列表中尾部添加元素" class="headerlink" title="向列表中尾部添加元素"></a>向列表中尾部添加元素</h4><p>如果要向列表<code>a_list</code>尾部添加元素123：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.append(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h4 id="向列表指定位置插入元素"><a href="#向列表指定位置插入元素" class="headerlink" title="向列表指定位置插入元素"></a>向列表指定位置插入元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.insert(<span class="number">1</span>,<span class="number">321</span>) <span class="comment">#在索引位置1添加数字元素321</span></span><br></pre></td></tr></table></figure><blockquote><p>列表顺序从0开始</p></blockquote><h4 id="移除列表指定内容的元素"><a href="#移除列表指定内容的元素" class="headerlink" title="移除列表指定内容的元素"></a>移除列表指定内容的元素</h4><p>移除第一个匹配的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a_list.remove(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>此时<code>a_list</code>中就只剩下一个6了</p><h4 id="负向输出列表中的元素"><a href="#负向输出列表中的元素" class="headerlink" title="负向输出列表中的元素"></a>负向输出列表中的元素</h4><p>当列表元素过长时，可以使用负数来指定索引位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_list[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(a_list[<span class="number">6</span>]) <span class="comment">#此时列表a_list中只有七个元素，-1和6效果相同</span></span><br></pre></td></tr></table></figure><h4 id="输出规定间隔内的元素"><a href="#输出规定间隔内的元素" class="headerlink" title="输出规定间隔内的元素"></a>输出规定间隔内的元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_list[<span class="number">1</span>:<span class="number">5</span>]) <span class="comment">#输出索引位置1到位置4的元素</span></span><br><span class="line"><span class="built_in">print</span>(a_list[<span class="number">2</span>:]) <span class="comment">#输出索引位置2及之后的所有元素</span></span><br></pre></td></tr></table></figure><h4 id="输出指定内容元素的索引"><a href="#输出指定内容元素的索引" class="headerlink" title="输出指定内容元素的索引"></a>输出指定内容元素的索引</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c_list = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">55</span>,<span class="number">123</span>,<span class="number">321</span>,<span class="number">3</span>,<span class="number">56</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c_list.index(<span class="number">3</span>)) <span class="comment">#只能输出最前端符合要求的索引</span></span><br></pre></td></tr></table></figure><h4 id="输出指定内容元素的出现次数"><a href="#输出指定内容元素的出现次数" class="headerlink" title="输出指定内容元素的出现次数"></a>输出指定内容元素的出现次数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(c_list.count(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h4 id="对列表中的内容进行排序"><a href="#对列表中的内容进行排序" class="headerlink" title="对列表中的内容进行排序"></a>对列表中的内容进行排序</h4><p>默认情况下为升序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c_list.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>可以指定参数降序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><hr><h3 id="多维列表"><a href="#多维列表" class="headerlink" title="多维列表"></a>多维列表</h3><p>形如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">multi_dim_a = [</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样的称为二维列表</p><p>输出时，我们一般：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(multi_dim_a[<span class="number">1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>就得到4</p><blockquote><p>更多关于多维列表的信息在numpy中进行拓展</p></blockquote><hr><h3 id="dictionary字典"><a href="#dictionary字典" class="headerlink" title="dictionary字典"></a>dictionary字典</h3><p>可以看作无序的列表，从有序的索引替换为了<code>key：</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d_list = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>] <span class="comment">#这是列表</span></span><br><span class="line">d_dictionary = &#123;<span class="string">&#x27;jk&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;aoligei&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;dokidoki&#x27;</span>,<span class="number">3</span>&#125; <span class="comment">#字典的形式为：&#123;key:value&#125;</span></span><br></pre></td></tr></table></figure><p>输出时和列表相同，通过<code>key</code>来索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d_dictionary[<span class="string">&#x27;jk&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 删除字典中元素</span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">del d_dictionary[&#39;dikidoki&#39;]</span><br><span class="line"></span><br><span class="line">print(d_dictionary) #检测操作是否成功</span><br></pre></td></tr></table></figure><h4 id="添加字典中的元素"><a href="#添加字典中的元素" class="headerlink" title="添加字典中的元素"></a>添加字典中的元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d_dictionary[<span class="string">&#x27;nmsl&#x27;</span>] = <span class="string">&#x27;nmysl&#x27;</span> <span class="comment">#直接给一个未出现过的key赋值便可</span></span><br></pre></td></tr></table></figure><hr><h3 id="import载入模块"><a href="#import载入模块" class="headerlink" title="import载入模块"></a>import载入模块</h3><h4 id="基本-2"><a href="#基本-2" class="headerlink" title="基本"></a>基本</h4><p>通过引用模块，可以扩展许多丰富的功能</p><p>通常我们在程序的开头来进行引用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.localtime()) <span class="comment"># 调用time模块的localtime功能输出</span></span><br></pre></td></tr></table></figure><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>当模块名太长时，可以在调用时赋予别名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br></pre></td></tr></table></figure><h4 id="载入模块的部分功能"><a href="#载入模块的部分功能" class="headerlink" title="载入模块的部分功能"></a>载入模块的部分功能</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> localtime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(localtime()) <span class="comment">#用此方法可以省略模块名</span></span><br></pre></td></tr></table></figure><blockquote><p>也可以使用<code>from time import *</code>来达到全部引用但省略模块名的效果</p></blockquote><hr><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>所谓的模块就是包含了各种功能的py等文件</p><p>可以将载入和被载入的文件放在同一目录下</p><p>也可以将准备载入的文件放置在python的默认模块目录中：</p><blockquote><p>C:&lt;python安装目录&gt;\Lib\site-packages #windows环境下</p></blockquote><hr><h3 id="continue-amp-break"><a href="#continue-amp-break" class="headerlink" title="continue&amp;break"></a>continue&amp;break</h3><p>可以通过<code>continue</code>来跳过本轮循环,通过<code>break</code>来跳出循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">m,n,j = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&#x27;jk是白丝好还是黑丝好？&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> a == <span class="string">&#x27;黑丝&#x27;</span>:</span><br><span class="line">        m = m+<span class="number">1</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> a == <span class="string">&#x27;白丝&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        j = j+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m =&#x27;</span>,m,<span class="string">&#x27;n =&#x27;</span>,n,<span class="string">&#x27;j =&#x27;</span>,j) <span class="comment">#可以通过m、n、j的值来帮助理解continue和break的不同</span></span><br></pre></td></tr></table></figure><hr><h3 id="try错误处理"><a href="#try错误处理" class="headerlink" title="try错误处理"></a>try错误处理</h3><p>运行python程序时，经常会遇到错误</p><p>这个时候就可以将错误存储到变量中输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;aoligei.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="comment">#因为并没有aoligei这个文件，所以一定会出错</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: <span class="comment">#错误信息存储到e中</span></span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>也可以进一步对错误进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;aoligei.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&#x27;创建一个名叫aoligei的txt文件？y/n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> response == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">        file = <span class="built_in">open</span>(<span class="string">&#x27;aoligei.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在这套组合中，还可以添加<code>else</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = <span class="built_in">open</span>(<span class="string">&#x27;aoligei.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    response = <span class="built_in">input</span>(<span class="string">&#x27;创建一个名叫aoligei的文件？y/n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> response == <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">        file = <span class="built_in">open</span>(<span class="string">&#x27;aoligei.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    file.write(<span class="string">&#x27;这是你创建的新文件。&#x27;</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure><hr><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip函数可以将多个一维列表整合为二元：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">list</span>(<span class="built_in">zip</span>(a,b)) <span class="comment">#python3中需要将zip转化为list展示，py2则不需要</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><p>输出结果m为[(1, 4), (2, 5), (3, 6)]</p><p>同样我们也可以zip更多的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c = [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">list</span>(<span class="built_in">zip</span>(a,b,c)) <span class="comment">#python3中需要将zip返回的迭代器转化为list展示，py2则不需要</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>在python中使用lambda来创建轻量级的匿名函数</p><p>当我们定义简单函数时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    <span class="keyword">return</span>(x+y)</span><br></pre></td></tr></table></figure><p>这种情况就可以使用lambda：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> x,y:x+y</span><br></pre></td></tr></table></figure><p>效果是等价的</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;python</span><br><span class="line">def square(a):</span><br><span class="line">    return(a**2)</span><br><span class="line"></span><br><span class="line">map(square,[1,3,5,7,9]) #返回迭代器</span><br><span class="line">print(list(map(square,[1,3,5,7,9])))</span><br></pre></td></tr></table></figure><hr><h3 id="copy复制"><a href="#copy复制" class="headerlink" title="copy复制"></a>copy复制</h3><h4 id="shallowcopy"><a href="#shallowcopy" class="headerlink" title="shallowcopy"></a>shallowcopy</h4><p>通常在对参数赋值时，经常使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">b = a</span><br></pre></td></tr></table></figure><p>这种行为实际上是将a和b的索引捆绑，输出两者id，得到相同结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)==<span class="built_in">id</span>(b))</span><br></pre></td></tr></table></figure><p>任意更改a或者b的内容，另一个参数也随之更改</p><p>而copy则不同，它相当于创建一个新id的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">c = copy.copy(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)==<span class="built_in">id</span>(c))</span><br></pre></td></tr></table></figure><p>得到False的结果证明a和c的id并不相同</p><p>但在<code>copy()</code>函数下，我们进一步输出元素的id：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a[<span class="number">2</span>])==<span class="built_in">id</span>(c[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p>结果是<code>True</code>，可以证明copy或者叫做shallowcopy是浅层复制，只完成最上一层id的变更，里层id依旧引用同样的内存空间</p><h4 id="deepcopy"><a href="#deepcopy" class="headerlink" title="deepcopy"></a>deepcopy</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = copy.deepcopy(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a[<span class="number">2</span>])==<span class="built_in">id</span>(d[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><p>结果是<code>False</code>，证明<code>deepcopy()</code>将所有内容完全复制了</p><hr><h3 id="pickle模块"><a href="#pickle模块" class="headerlink" title="pickle模块"></a>pickle模块</h3><p>pickle可以将一个对象简单持久化保存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">a = &#123;<span class="string">&#x27;nmsl&#x27;</span>:<span class="string">&#x27;nmysl&#x27;</span>,<span class="number">23</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],&#123;<span class="string">&#x27;cnm&#x27;</span>:[<span class="string">&#x27;wcnm&#x27;</span>,<span class="number">2</span>,<span class="number">25</span>],<span class="number">3</span>:<span class="number">321</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;存在这里.pickle&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="comment">#wb表示用二进制形式打开</span></span><br><span class="line">pikle.dump(a,file)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>之后就可以在这个pickle文件中找到我们保存的对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;存在这里.pickle&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    b = pickle.load(file)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><p>b的显示内容就是之前保存的字典a</p><hr><h3 id="set去重"><a href="#set去重" class="headerlink" title="set去重"></a>set去重</h3><p>使用<code>set()</code>函数可以保留列表以及字符串中不重复的部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list_a = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">line_a = <span class="string">&#x27;woshinimadebabaahahahahahhaqunima&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(list_a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(line_a))</span><br></pre></td></tr></table></figure><h4 id="add-amp-clear-amp-remove-amp-discard"><a href="#add-amp-clear-amp-remove-amp-discard" class="headerlink" title="add &amp;clear &amp;remove &amp;discard"></a>add &amp;clear &amp;remove &amp;discard</h4><p>而针对<code>set()</code>结构，也有几种常见的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">line_b = <span class="built_in">set</span>(line_a)</span><br><span class="line">line_b.add(<span class="string">&#x27;x&#x27;</span>) <span class="comment">#在set中单独添加一个x，不能一次添加多个</span></span><br><span class="line"><span class="built_in">print</span>(line_b)</span><br><span class="line"></span><br><span class="line">line_b.clear() <span class="comment">#清空line_b</span></span><br><span class="line"><span class="built_in">print</span>(line_b)</span><br></pre></td></tr></table></figure><p>第一个输出为添加过x的<code>set(line_a)</code></p><p>第二个输出为空<code>set()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list_c = <span class="built_in">set</span>(list_a)</span><br><span class="line">list_c.remove(<span class="string">&#x27;a&#x27;</span>) <span class="comment">#移除元素a</span></span><br><span class="line"><span class="built_in">print</span>(list_c)</span><br></pre></td></tr></table></figure><p>与<code>remove()</code>不同的是，<code>discard()</code>在删除不存在的元素时并不会报错，而是返回当前的set内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_c.discard(<span class="string">&#x27;m&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(list_c)</span><br></pre></td></tr></table></figure><blockquote><p>如果直接<code>print(list_c.discard(&#39;a&#39;))</code>只会返回None，但操作已经完成，这是操作方法固有的，add，clear等同理</p></blockquote><h4 id="比较不同的元素"><a href="#比较不同的元素" class="headerlink" title="比较不同的元素"></a>比较不同的元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_d = <span class="built_in">set</span>(list_a)</span><br><span class="line"><span class="built_in">print</span>(list_c.difference(list_d))</span><br></pre></td></tr></table></figure><p>输出的是<code>list_c</code>中与<code>list_d</code>不同的部分</p><hr><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><blockquote><p>进阶内容在其他Python学习章节中介绍</p></blockquote><h4 id="multi-threading多线程"><a href="#multi-threading多线程" class="headerlink" title="multi-threading多线程"></a>multi-threading多线程</h4><h4 id="multi-processing多核运算"><a href="#multi-processing多核运算" class="headerlink" title="multi-processing多核运算"></a>multi-processing多核运算</h4><h4 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h4>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置hexo博客</title>
      <link href="/2021/04/16/%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/04/16/%E9%85%8D%E7%BD%AEhexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="记录一下，从零开始的hexo博客"><a href="#记录一下，从零开始的hexo博客" class="headerlink" title="记录一下，从零开始的hexo博客"></a>记录一下，从零开始的hexo博客</h2><blockquote><p>首先确认系统环境</p></blockquote><p>我使用的是Windows10，MacOS应该大差不差,同样后面的都是基于Win环境的下载和展开。</p><blockquote><p>其次是Git和Node.js的配置</p><blockquote><p><a href="https://git-scm.com/download/win">Git下载</a><br><a href="https://nodejs.org/dist/v14.16.1/node-v14.16.1-x64.msi">Node.js下载</a></p></blockquote></blockquote><p>在完成git和node的安装后，我们进入GitBash，开始Hexo的正式安装</p><hr><p>我们使用的都是npm，Node.js下的包管理器。大陆用户不用梯子访问可能会有些迟缓，可以通过更换淘宝的cnpm来加速。</p><p>在GitBash中进行操作会更快，输入下面的指令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这里可以直接键入cnpm来检测是否安装成功</p><blockquote><p>对于hexo,我们就可以使用cnpm来安装了。</p><blockquote><p>在GitBash中使用指令</p></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><blockquote><p>安装完成后，我们需要指定一个文件夹来作为我们的本地库，这个就是之后我们博客所有内容的一个基础。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;文件夹&gt;</span><br><span class="line">$ cd &lt;文件夹&gt;</span><br><span class="line">$ npm install   #进行基础目录的安装，下面简单介绍我们入门后我们会接触到的部分。</span><br></pre></td></tr></table></figure><ul><li>—config.yml<blockquote><p>网站的基本配置信息、参数等</p></blockquote></li><li>package.json<blockquote><p>网站的应用程序信息，比如我们记录文章的Markdown renderer就在这里</p></blockquote></li><li>scaffolds<blockquote><p>基础的模板文件夹，后面写博客可以直接调用</p></blockquote></li><li>source<blockquote><p>我们发布的博客文件等就会生成在这个位置</p></blockquote></li><li>themes<blockquote><p>主题文件夹，hexo应用主题也比较方便，后面会提到。</p></blockquote></li></ul><p>其实走到这一步，更多的内容应该去<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>中挖掘了</p><hr><p>完成hexo的安装，我们在安装的&lt;文件夹&gt;下进入GitBash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>就启动了最基础的博客页面，默认端口应该是4000.</p><blockquote><p>我们Ctrl+C中断，添加我们的第一个页面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n &quot;My First Hexo Blog&quot;</span><br></pre></td></tr></table></figure><p>英文引号内就是我们的标题了，进入source文件夹就可以看到生成的md文件，这里可以用你喜欢的方式进行编辑，我选择的是vscode，比较方便。</p><p>md文档的语法这里不再赘述，有空我会总结一下。</p><blockquote><p>在本地访问肯定是远远不够的，这里我们选择绑定Github的仓库来进行远端部署。<br>Git的基础配置如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">$ git config --global user.email &quot;GitHub注册邮箱&quot;</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>得到ssh key之后三个回车<br>打开网页GitHub_Settings_keys页面，新建new SSH Key<br>复制得到的key，完成配置</p><blockquote><p>进入刚才提到的—config.yml中，找到deploy部分</p><blockquote><p>type: git<br>repo: 完整的仓库路径，应为<a href="https://github.com/.../">https://github.com/.../</a>…<br>branch: master</p></blockquote></blockquote><p>安装Git部署插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-giot --save</span><br></pre></td></tr></table></figure><p>然后就完成了和GitHub的绑定，我们尝试一下。</p><pre><code>hexo c #清除缓存，有的时候更改没能快速生效，就需要清理缓存hexo g #生成文件hexo d #部署</code></pre><p>这样我们就能在&lt;仓库&gt;.github.io这个url中访问我们的博客了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2021/04/16/%E7%AC%AC%E4%B8%80%E7%AF%87Hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/04/16/%E7%AC%AC%E4%B8%80%E7%AF%87Hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="写点什么好呢"><a href="#写点什么好呢" class="headerlink" title="写点什么好呢"></a>写点什么好呢</h2><hr><p>芜湖</p><p>差不多整了波hexo，试试吧</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
